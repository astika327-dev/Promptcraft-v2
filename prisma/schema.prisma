// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String          @default("buyer") // buyer, creator, admin
  walletBalance Int             @default(0)
  accounts      Account[]
  sessions      Session[]
  templates     Template[]
  transactions  Transaction[]
  ratings       Rating[]
  payouts       PayoutRequest[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Template {
  id           String        @id @default(cuid())
  title        String
  description  String
  promptText   String
  category     String
  price        Int // in cents
  creatorId    String
  isPublished  Boolean       @default(false)
  previewText  String?
  ratingAvg    Float         @default(0)
  downloads    Int           @default(0)
  creator      User          @relation(fields: [creatorId], references: [id])
  transactions Transaction[]
  ratings      Rating[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id              String   @id @default(cuid())
  templateId      String
  buyerId         String
  amount          Int
  platformFee     Int
  creatorFee      Int
  status          String // pending, success, failed
  midtransOrderId String?
  template        Template @relation(fields: [templateId], references: [id])
  buyer           User     @relation(fields: [buyerId], references: [id])
  createdAt       DateTime @default(now())
}

model Rating {
  id         String   @id @default(cuid())
  templateId String
  userId     String
  rating     Int
  comment    String?
  template   Template @relation(fields: [templateId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, templateId])
}

model PayoutRequest {
  id          String   @id @default(cuid())
  creatorId   String
  amount      Int
  status      String // pending, processed, failed
  creator     User     @relation(fields: [creatorId], references: [id])
  requestedAt DateTime @default(now())
  processedAt DateTime?
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
